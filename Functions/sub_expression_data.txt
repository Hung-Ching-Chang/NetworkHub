# Function: sub_expression_data
#   Retrieve expression data of genes in the target pathway, transform them into node level, and
#   remove nodes without expression levels

# Input and output
# input: (gene_data, node_detail, sample_start_pos, sample_end_pos, symbol_in_KGML)
#	(1) gene_data: gene information and gene expression levels. It must have a column 
#	    named EntrezGeneID as genes' ID
#	(2) node_detail: information of nodes within the target pathway. It can be obtained 
#	    by executing the function ¡§KGML_to_Matrix¡¨.
#	(3) sample_start_pos: index of the column containing the gene expression of the first sample
#	(4) sample_end_pos: index of the column containing the gene expression of the last sample
#	(5) symbol_in_KGML: determine the names of nodes in the output matrix ¡§pathway_expression¡¨. If ¡§T¡¨, use the gene symbols from the input object ¡§node_detail¡¨. If ¡§F¡¨, use the gene symbols from input data matrix ¡§gene_data¡¨.
# output: (pathway_expression, missing_pos) (saved as list)
#	(1) pathway_expression: expression data at the node level
#	(2) missing_pos: positions of the nodes missing expression levels

##################################################################
# function starts

sub_expression_data <- function(gene_data, node_detail, sample_start_pos, sample_end_pos, symbol_in_KGML = T){
  # create a new variable to store node ID in the target pathway
  pathway_entryID <- as.character(node_detail[,1]) 
  # do this if you want to catch gene symbol in the KGML file
  if(symbol_in_KGML == T){
    pathway_node_name <- as.character(node_detail[,1]) 
  }
  # record all gene's ID in the gene expression data file from the column named "EntrezGeneID"
  # example of gene ID: gene ID of gene "SERPINB7" is "8710"
  all_entryID <- as.character(gene_data$EntrezGeneID) 
  # create two variables for output
  pathway_expression <- NULL
  node_name <- NULL
  # deal with nodes one by one 
  for(i in 1: length(pathway_entryID)){
    # save the position of genes in the gene expression data
    # wash out the node after the process is completed
    gene_pos_in_data <- NULL
    # record all gene's ID in the target node
    # if a node contains more than one gene (ex: If "10000", "207" and "208" are in the same node, then this node contains three gene expressions.)
    # then use the function "strsplit" to divide the node into genes (ex:"hsa:10000 hsa:207 hsa:208" -> "hsa:10000" "hsa:207" "hsa:208").
    geneID_in_node <- strsplit(pathway_entryID[i], " ")
    geneID_in_node <- unlist(geneID_in_node)
    # next, find the genes' position in the gene expression data.
    for(j in 1:length(geneID_in_node)){
      # remove the "hsa:" in front of gene ID
      char_length <- nchar(geneID_in_node[j])
      geneID_in_node[j] <- substr(geneID_in_node[j], start = 5, stop = char_length)
      # find genes' position
      if(sum(all_entryID == geneID_in_node[j]) == 1){
        gene_pos_in_data[j] <- which(all_entryID == geneID_in_node[j])
      }else{
        gene_pos_in_data[j] <- NA
      }
    }
    # If the node contains genes without collected expression levels, then remove it
    gene_pos_in_data <- gene_pos_in_data[!is.na(gene_pos_in_data)]
    node_expression <- gene_data[gene_pos_in_data,]
    # take average of the genes to be the node expression
    expression_mean <- sapply(node_expression[,sample_start_pos:sample_end_pos], mean)
    if(symbol_in_KGML == T){ 
      tmp_name <- pathway_node_name[i]
    }else{
      # check the column name of gene symbol is ¡§GeneID¡¨ . 
      tmp_name <- paste(node_expression$GeneID, collapse = ",")
    }
    node_name <- c(node_name, tmp_name)
    pathway_expression <- rbind(pathway_expression, expression_mean)
  }
  pathway_expression <- as.data.frame(pathway_expression)
  # If the node contains no expression, save the node expression as 0
  # identify position of the node with 0 value and remove it
  missing_pos <- which(is.na(pathway_expression[,1]))
  if(length(missing_pos) != 0){
    pathway_expression <- pathway_expression[-missing_pos,]
    node_name <- node_name[-missing_pos]
  }
  row.names(pathway_expression) <- node_name
  return(list(pathway_expression, missing_pos))
}

